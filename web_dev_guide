Html 5
----------
tags:

forms:
create an input region on the page
    - <input type="text" value="amiay narayan" place_holder="Your Name"> // value and placeholder are two different things. 
    - <input type="radio" name="age" checked>
    - <select>
        <option></option>
        <option selected></option> // selected is used to preselect from a list of options. 
      </select>
    - <input type="submit" value="Click me">  // value controls the text that appears on the button. 

Tables:
------
<table>
<thead>
<thead>
<tbody>
    <tr> <td> data1 </td></tr>
    <tr> <td> data2 </td> <td> seconddata</td></tr>
</tbody>
</table>

Links
-----
anchor tag used,    
        <a href='https://www.google.com'>click for google</a> // active link
        <a href="link_of_wikipedia"><img src='img_name_with_the_page'>click</a> // relative link
        <a href='#some_id_within_the_page'>clink me</a> // anchor link  

Html entities:
-------------
special symbol printing on the browser. Numbers or Names : &nbsp; is the name and &#160 is the number.

iframes:
--------
Basically it can open a whole other webpage as a Frame in my webpage. 
    
    <iframe src="" frameborder='0'></iframe> 

CSS:
----

float : right/left; /* this property allows us to position the div element to certain side left or right. if we change the width of viewport this remains relative. 
'center' is not a valid value for the float property. If we want to put some content below float eelements, then we have to 'clear:both' to remove the floats on the
both sides.

Positioning:
-----------
Gives better precision that 'float', to position the contents. 
.class_name{
    position: relative;
    left: -20px;
    z-index: 2; // higher z-index appears on top.
}
// relative means that it, given parameters left and right, it will appear x px and y px away from the position that it might have been, if no positioning was applied. 
// z-index requires the presence of 'position: ' 

    position: absolute;
    left: 650px;
'absolute' positioning => The element is taken out of the flow. The page is rendered as if the the current element is absent. not even changing the width of the screen affects the position of the element. 

.class_name{
    position: fixed;

}
'fixed' also takes the content out of flow, but when we scroll, the div remains at the fixed place. like used for navigation bar.

Margins:
-------
.class_name{
    background: red;
    margin: top bottom;
    margin-bottom : ;
    margin-top: ;
}
See we can also create the left space using postion: and then left: 39px. Margin is meant for the purpose. another differenc is: 'element remains in the flow'.
Also margin the space before the <tag> is about to start , depending on the side on which it is provided. but padding is applied for hte elements inside.

padding:
-------
Padding adds space beween the div and its inner elements. 
Browsers add by-default paddings andmargins. To git rid of them body { margin: 0; padding:0} 

border:
-------
#id_name{
    border: width color style;
    border-width: top right bottom left;
    border-style: '';
    border-color: '';

}

Fonts Styling:
-------------
.class_name{
    font-family: "Times new Roman", serif;
    font-weight: 300; /* 800 */
    font-size: 2rem;
    font-style: italic;
    text-decoration: none;// for anchor tag. 
}

aligning text:
left right or justified(spread to fill the parent div)

pseudo class:
-------------
a:hover{
    text-decoration: none;
}
a: visited{
    color: green;
}
a:link{
}
a:active{
}
Note:
.clear {
    clear: both; /* right/left */
}

External CSS: As we already know, avoids reloading of the styling again and again thus improving
performing. It also makes things much cleaner and maintenance much more obvious and smooth. 

JS
---
Java script is also three types, using which we can insert JS to our html page.

<button onclick="alert('Hi')>click me </button>

Arrays:
-------
let myarr= new Array();
let arr=[1,34,555] // is also an array

jQuery
-------
A JS framework that sits on top of JS. Javascript is used to make webpages interactive. With the 
help of jquery it becomes a lot simpler. There are other frameworks that serve the same purpose. but jQuery
is by far the most popular of them all. In order to be able to write jquery, we must install locally or use the following link order to access the jquery library:
   src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js">

Note the difference in usage of jquery and javascript: In plain vanilla JS we referred to an element by
    document.getElementById("id_only").onclick=function(){
        ... some more code ...
    }
But in jQuery, we start with a '$' almost always.

    $("#id_with_that_hash_infront").click(function(){ ..some code..});

So, we can already see the compactness of jquery, and the Brit has said that it is more flexible, I will take
his word for it. 
$('.class_name').click(function(){
    $(".idname").html(); // gets the content of the or could be used to modify the element. 
}

.click --> .hover

we can also change the attributes of a tag/element. this can be done :
    $("element_name").attr("attribute","value_of_attribute");
We can also change the STYLES: 
    $("#id_name").css("property", "value");// note the usage of "" while passing the arguments.
again here as well, we can 'query' the value of a css-property
This allows us to do all sorts of interesting stuff. We can ask for the screen width. 
    $('html_or_body').css("width"); // we can use some sort of alert of console.log()
    $("element").fadeOut("slow"); // self explanatory but you see how easy it is. 
Callback functions:
-------------------
We might want to do certain action just after another action has finished. Callbacks to rescue, 
These are passed as parameter to the previous function. shown as follows:
    $('#id1').click(function(){
        $('.class_name').fadeOut("slow",function(){
            console.log($('this').attr("id"), ' has faded out');
           
        });
    }); // infact after '.click(function(){' is also a call back function. 

Toggling (back and forth)
-------------------------
<script>
        $("#toggle_btn").click(function(){
                if(("#para").display()=="none")
                        {
                                $("#para").fadeIn();
}
else{
                        $("#para").fadeOut();
}
});

</script>

Another way is to use a variable, that will change state when 'true' or 'false', and toggle between them.


Animate
-------
$(".className").click(function(){
        $(this).animate({json object of properties and values},time_in_mili_sec});
}

These css properties will be acquired by the element, the time provided. 
We can also add fall-back functions after the time.

Note: The property name in jquery object is sometimes different than its css-counterpart.
      e.g., height, width are same in both cases. But 'background-color' becomes backgroundColor.
      Just a matter of camel casing. Not too serious. 

Handy functions in jQuery
--------------------------
.fadeOut("slow") // fades out the selected element
.fadeIn()       // fades in selected element
.html()         // returns the content of the element
.css("property", "value")       // alters the value of the the selected element
.css("property")                // returns the value of the "property"
console.log($('this').attr("id"),'has fadedout') // returns the associated element. 
.animate({JSON_object_of_properties_and_values},time_in_mili_sec) // 

React : Angela Yu : Udemy
------------------------------
It helps in declarative coding rather instead of imperative style(just js), This makes our lives much easier as a developer. 
Every thing that we create will be present in the <div id="root"></div>
    
    var React = require('react');       // instead use import React from "react";
    var ReactDOM = require('react-dom');
    ReactDOM(What to show,    where to show it , ... third will come later)---> ReactDOM.render(<h1>Hello world</h1>, document.getElementById("root"));
The strange thing about the above code is that we are able to write and render html directly from a js file. Well, actually this is called jsx. With the  help of compilers this jsx is converted into pure javascript. The compiler that does this is 'babel'. That is why we also "require" the 'react' an 'react-dom'. Actual demo can be seen online using some  site. 

Note: The first argument can of ReactDOM() can only take single html element.<h> cannot be in series with other such as <p>.
So we need to bind everthing into single div. 

So jsx allowed us to directly create html elements and render it. However, this makes it static. There we shouldd be add some dynamic content as well. This can be done using {} and the variable name. 

...
const name = 'amiay';

ReactDOM.render(
    <div>My name is {name}</div>, ...
)

Note: {} inside this curly braces, you can only insert an 'EXPRESSION' not a statement. expressions evaluate to a value. However, 
statements require the computer to do some work, like if statement. 

Ways of adding dynamic content for first name and last name:
        {first_name + " " + last_name }
        {first_name} {last_name}
        {`${first_name} ${last_name}`}      # this is string literal

styling
--------
class based styling(recommended by React) is similar to what we are used to: declaring in a separate file. However, the inline styling is quite interesting, here. If we specify the inline styling as style={width: 100% } this also works fine but the compiler starts giving us some error. this is so because it expects an java script object to specify the  styling. e.g.:
    const styling = {
        width: "read",
        fontSize: '20px'
    }
    // also note the use of '' around the property value.
    and in jsx: 
    style={styling}     // yes two {{


As already mention, React allows us use components. That allows other benfits as well. But the first one is -- keeping the code lot cleaner by distributing it among different files. => Easier to maintain. How?
Idea of function components:
// inddex.js
    import ...
    import ReactDOM from 'react-dom';

    function Heading(){
        return <h1>My heading</h1>
    }

    ReactDOM.render(
        <div>
            <Heading />
            <ul>
                <li></li>
                <li></li>
                <li></li>
            </ul>
        </div>
    , document.getElementById('root')
    )

Note that the custom components have been named using Capital letter as the first letter. There are other naming conventions as well. Look at the airbnb, for more such best practices. Now we should also store these components in a different file and 'import' them where needed. Also keep in mind to 'import React from 'react'' [ enables to write jsx code] you can save it as .js or .jsx(preferred).  
// touch Heading.jsx  &  move Heading functional component there
// touch List.js & move <ul> there as well. 
Now our index.js becomes : 
    
    import ...

    ReactDOM.render(
        <Heading />
        <List />
    , document.getElementById('root'));

We, now, go a step further and replace the first argument of render( with <App />). And that means that we create another component that will have house all components. Another layer of modularity, leaving our index.js with only one component to render-> App. We create another file App.js or .jsx that will have :
    import React from 'react';
    function App(){
        return(
            <Heading />
            <List />
        );
    }
    export default App; 

what is 'default' export ?
create a file : math.js (not jsx)
        const pi = 3.142;
        function doublePi(){
        return 2* pi;
        }
        function triplePi(){
        return 3*pi;
        }

        export default pi;      
        export {doublePi, triplePi};
in app.js
        import pieee from 'math.js';        // you can receive the default export through any string we want & there is only one default.
        import {doublePi, triplePi} from 'math.js'; // here the receiver strings must match and cannot be arbitrary.
        // another way of receiving is : 
        import * as pi from 'math.js';

        pi.default  is 3.142, pi.triplePi() is a method call.

Now we are moving from the code sandbox to local development env. We need an editor. we will use vs code for now. But if you want continue using vim, install the plugin for javascript called : vim-javascript plugin.

Using map
---------
Using map helps: 
    - better performance
    - potential bugs as the state of other (not inteded) array item might change. 
        function mapContact(contact) {
          return (
            <Card
              id ={contact.id}
              name={contact.name}
              email={contact.email}
              img={contact.imgURL}
              tel={contact.phone}
            />
          );
        }
        function App() {
          return (
            <div>
              <h1 className="heading">My Contacts</h1>

        ======>       {contacts.map(mapContact)}            <=======
            </div>
          );
        }

Note: instead of defining a new function for every map, we can 'on the spot' define an anonymous function. 
    {contacts.map(function (contact){
    return(
       <Card ....props go in here  /> 
    });}
    // similar to forEach
    contacts.forEach(function(contact){
        <
    }
Similar functions 
-------------------
Filter  : look through and return those that fill a particular criteria
        contacts.filter(function(num){
            return num>10
        })
Reduce  : 
        contacts.filter(function(accumulator, currentNumber){
            return accumulator + currentNumber
        });
Find
FindIndex

Arrow Functions
--------------------
x => x*x

Ternary operator
-------------------
I know these can be very helpful. exp ? true : false.
but there one more alternative, when you have only one condition to check( since you cannot use if(){} block in jsx). Therefore, we use
'&&' operator in conjuction with some expression. 
    !isRegistered && <Form is_logged="false" />
    // above is just another way of putting things when in false condition we want to return ''  or null

Hooks
----------
Why do we need hooks?
consider the following way to handle the state(for title of a post).
    function Post(props){
        let title = props.title;
        const handle_click = () => {
            title = "new title";
            console.log('title');
        }
        return (
            <div>
                <p>{title}</p>
                <p>This is the content</p>
                <button onClick={handle_click}>Change Title</button>
            </div>
        );
    }
The above component should be able to change its title when the button is clicked, right? 
It might be tempting to agree to the above statement. But react does not work that way. This where the 
genius or 'magic' of react comes into play. The would indeed work if the page was rendered some how. This is the way 
html pages work. But using just normal functions do not allow this to happen, until we 'imperatively' ask it rerender the component. 
But react takes care of all that hassle for us. And provides us with hooks, which can change the state declaritively. 
useState is one of the hooks.
declarative : 
How our different components should look under different conditions. 
imperative : 
We get hold hold of the component and then change it.(getElement).style.text... => tell to do something different.

hooks are relatively new concept in our app, where using which we can read or modify the state of the app.

    var count = 0;      // initial value of the count
    function increase(){
        count++;
        console.log(count);
    }
    function App(){
    return (
    <div>
        <h1> {count}</h1>
        <button onClick={increase}>+</button>
    </div>
    )
    }

When this code is executed, and the button clicked the value of the count variable changes indeed but since the components need to be re-rendered in order to reflect the change, there fore the value of count does not change on the screen. So every time we rendered, dom again, as the value of count changes we would certainly be able to see the change.
    ... 
    function increase(){
        count++;
        ReactDOM.render(<the whole page>, document.getElementById('root'));
    }

This makes our life more difficult. Hooks come to our help here (useState for current use case). But the condition for using hooks is that it must be used in a functional component. It will change the state and rerender the only required component. 

    import React, { useState } from 'react';

    function App(){
        var [count, setState] = useState(0);        // destructuring and setting the initial state to 0

        function increase(){
            setState(count + 1);
        }
        function decrease(){
            setState decrease(count - 1);
        }
        
        return (
            <div>
                <h1>{count}</h1>
                <button onClick={increase}>+</button>
                <button onClick={decrease}>1</button>
            </div>
        )
    }

setInterval(function_name, 1000): calls the function after every 1000milisec

Destructuring
----------------
    // Array
    const some_array = [1,2,3,4]
    var [ele1 , ele2] = some_array      // => a will be 1 and b will be 2
    // object
    const obj = {
        name: "amiay",
        roll: "234",
        score: 123, } // same as "score": 123
    }
    const {name, score} = obj;          // name and score have to match exactly
    const {name="default", score="0"} = obj         // handles missing data
    //extensive destructuring
    const { name, sound, feedingRequirements: {food, water} }

controlled components and two way binding
--------------------------------------------
useStates allows us to assign the value of the form fields.

How to communicate from child to parent? 
---------
We can communicate from parent to child using the props. However when it comes to communicating other way round we can achieve it by passing functions to the child as props, and then calling the function in the child with data present in the child. Using this function we can change the state of the parent. Here also the term comes, 'lifting state up'. This means passing the state back to the parent with the intention to use this state-data for other components(where passing it using props was not possible).

Note: Careful: Just after the change of state from child to parent, the value change is not reflected in the console.log(state_value).why? I don't know. 

