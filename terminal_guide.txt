This will sound RANDOM, but believe me it is not!

Making an IP static on a LAN
-_---------------------------
    vim /etc/dhcpcd.conf
    
    interface wlan0
    static ip_address=192.168.0.104             # the static ip you want
    static routers=192.168.0.1                  # gateway ip
    static domain_name_servers=8.8.8.8 8.8.4.4  # you could give any
    reboot

Display all devices on network
----------------------------------
    sudo apt install arp 
    ping 192.168.0.255      # replace last section of gateway(.1) with .255
    arp -a


basic commands : believe me you will need them and also believe me you will forget them
--------------------------------------------------------

    pwd
    cd ~home_directory/
    wget url_for_.sh_file
    bash the_above_file.sh
    conda install jupyter
    conda init bash  # when powerline-shell: command not found while activating env
    pipx install powerline-shell # or may be sudo apt does the job as well
    jupyter notebook

vim Plugins
-----------
I am using tpope's "pathogen". 
    mkdir -p ~/.vim/autoload ~/.vim/bundle && \
    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
    execute pathogen#infect()           # add this particular line to .vimrc , in my case to /.vim/vimrc
That is it ! now start installing plugins... git clone

Using Vundle
-------------
Better. 
requires more setup steps but pays in the long run.
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')
    Plugin 'VundleVim/Vundle.vim'
    "" other plugins go in here as well <-----------
    call vundle#end() 
in the command line of .vimrc
    :source  %
    :BundleInstall "" changes will be in effect immediately
Don't forget to do BundleInstall after ever Plugin addition.
Warnings: Do not stage the whole .vim => add a .gitignore with 'bundle/' in it. 


Wifi Control
--------------
nmcli is a command line tool controlling NeworkManager. 
        
        nmcli c             : list of saved connections
        nmcli d wifi list   : list of available wifi hotspots
        sudo iwlist <WifiInterface> scanning

        ifconfig -a         : to see the list of interfaces

creating & saving aliases
--------------------------
# temporary aliases
>> alias activate='source ../../bin/activate'

# permanent
alias activate='source ../../bin/activate'  # in ./bashrc


git-flow
------------------
https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
    # starting a git flow
    git flow init

    # creating a feature branch
    git flow feature start feature_branch_name      # without using git-flow
                                                    # git checkout develop
                                                    # git checkout -b feature_branch
    # git flow feature finish feature_branch        # git checkout develop && git merge feature_branch

    # Once develop has acquired enough features for a release (or a predetermined release date is approaching), you fork a release branch off of develop.Creating this branch starts the next release cycle, so no new features can be added after this pointâ€”only bug fixes, documentation generation, and other release-oriented tasks should go in this branch. Once it's ready to ship, the release branch gets merged into master and tagged with a version number. In addition, it should be merged back into develop, which may have progressed since the release was initiated. In addition, it should be merged back into develop, which may have progressed since the release was initiated.
    
    git flow release start 0.1.0
    git flow hotfix start hotfix_branch     # hotfixes are done by forking the master
    git flow hotfix finish hotfix_branch    # similar to release branch, hotfix gets mergedd to both 'master' & 'develop'


    git flow release finish '0.1.0'
