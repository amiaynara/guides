This is a guide for REACT & REDUX
__________________________________

Why do we need a Library/Frameworks?
WE can build fairly complex websites using HTML, CSS, JS,bootstrap and jQuery. 
Complexity of managing DOM manipulation and data updates manually.
Well defined application architectures(these libraries and Frameworks have). 

A Library offers 
    - Collection of implementations of behaviour with a well defined interface to invoke it. 
    - Reuse of behaviour
    - Modularity (jquery)
Software Framework
    -Abstractionin which software provides generic functionality that can be selectively changed by additional 
     user-written code. 

 eg. Angular, Ember, Backbone....

What is React?
A JavaScript library for building user interfaces. It is Declarative and Component-based. Facebook developed in 2011. 
Speed. Simplicity. 

Vocabulary: One-way data flow, JSX, Components, State, Props, Virtual DOM, Element, Flux/Redux, Test.

-----------------
create-react-app
-----------------
We will be using yarn here. 
    sudo npm install --save-dev create-react-app
#install yarn exactly as given in the official documentation
    npx create-react-app <name_of_proj_directory> # after going into the intended directory
now install the lite-server(or any server)--> add that to the script of the package.json. 
    directory will be successfully created. And you will see the messages:
      yarn start
      yarn build
      yarn test
      yarn eject
    These options will be shown.
    You will also see 6 files(folders are file in disguise).
now
    yarn start #npm start ## depending on your choice
This will open your default browser and with that you will see the animation React(yes the famous one).

The next step is to get familiar with enviroment. Looking at src/App.js. 
We find some vague relationship with the html syntax but we have some distance to cover before we arrive at any conclusions. 

Configure React: Reactstrap
----------------------------
We will make use of Bootstrap4 classes that we learnt in the previous course. So to attain that goal we will install "Reactstrap" [Recall that bootstrap requires popper and jquery as well.]. 
        yarn add bootstrap@4.0.0
        yarn add reactstrap@5.0.0
        yarn add react-popper@0.9.2
Then import bootstrap to the 'index.js'
    import 'bootstrap/dist/css/bootstrap.min.css'
Also modify the 'App.js' in the src. This will be done to add our own component. And get it displayed on to the browser when the page is requested by the browser. 

Note:
    - We fill the page using Components, that are created in files like App.js or Tweet.js or page.js
    - The actual rendering is done by the 'index.js'
    - By defining components in JS(using React), we actually the export 'html' to the main page and also add the javaScript behaviour at the SAME Place. 

Getting hands dirty
-------------------
Adding our own components

    import React, { Component } from 'react';

    class Menu extends Component {
      
      // JSX here

      constructor(props){
        super(props);
      }
      render() {
        return (
        );
      }
    }


using un-named function to get things done when you have a paramter at hand. The .map function can be very powerful. 
const menu=this.state.map((dish){
  //use dish to construct the body of some object in the web-page. 
  //we use it when we see that we have to do some repetitive work
  //dish is an array
}
---------------------------------------------------------------------------------
Important note: All documents about using reactstrap is present on its github pagehttps://reactstrap.github.io/
---------------------------------------------------------------------------------
============
State
------------
Each component can store its own local information in its "state" 
  - these states are private and fully controlled by the component
  - can be passed as 'props' [short for properties] to children
  - only a component implemented as a Component can have a local state. 
[This means that we have react component that are not implemented as class]
  - the state information is usually declared in the constructor
  - to update the state of a 'component' -> [cannot be done by changing the property values]-----> can only be done through the setState() method. 

Never do the following:
    this.state.selectedDish=dish;

--------
props
--------
A parent component can be storing the state. this state can be passed to a child component using 'props' as a single object. 
    <Menu dishes={this.state.dishes}/>
Here the dishes are available as props within the Menu Component and can be accessed as 'this.props.dishes'
So this way data can be passed DOWN the heirarchy. 
But what to do when we need to passes the data up the heirarchy and cause the changes everywhere to take place. This is called 'Lifting State Up'.
-----------
Handling Arrays
-----------
const menu = this.props.dishes.map((dish)=>{
  return (
    <div key={dish.id}>
      <h1>{dish.name}</h1>
      <p>{dish.description}</p>
    </div>
  );
}

Note the use of 'key'. This is used so that when there are changes to the list, then it helps in re-rendering of the page. React modifies only those parts of DOM that 'Need' to be modified.  

React Component Lifecycle
-------------------------
First it does not exist, then it gets created; it changes if necessary and finally gets removed/unmounted. During each phase of its life cycle there are certain methods that are/can be invoked. 
1. Mounting: 
    - constructor()
    - getDerivedStateFromProps()
    - render()
    - componentDidMount()
Tip: A good web-developer tool is React-dev-tool (extension available for all chrome and firefox).    

Informal classification of components
--------------------------------------
- Presentational(like 'DishDetail') vs Container 
- Skinny vs Fat [you can see why they are informal]

2. Updating
  In the project at hand our 'DishDetail' has this stage of the life Cycle. AS a different dish is selected the view is changed(partially).
At this stage we again have certain hooks/methods that are called:
  - getDerivedStateFromProps()
  - shouldComponentUpdate()
  - render()
  - getSnapshotBeforeUpdate()
  - componentDidUpdate()


These can be shown to be invoked by putting them in the code at appropriate places and then do console.log()

Functional Components
------------------------
We have been creating components using the classes; there is simpler method.
We have been "extending" React.Component class to get class components. And here we are required to include 'render()' method.
JavaScript function that returns a React element or a collection of React elements that define the view 
Note: this receives props as parameter. 
      CANNOT have a local state. 

When to use functinal components?
When you have components that PURELY use the 'props' as passed from the parents. They don't have(or don't need to have any local state) then we can/shold use functions to implement such components. 
Another hint is given by 'yarn start' : "Line 6: Useless constructor' ;)
Enough of talking... how do I do it?
    function RenderMenuItem({dish,onClick}) {
      return (
        <!-- some HTML code -->
        <-- which can also have {dish.image} included javascript -->
      );
    }

Another WAY:
    
    const Menu = (props) => {
      const menu = props.dishes.map((dish)=>{
        return (
          <div>HI I am a new component!</div>
          );
        });
      }
Virtual DOM
------------
Browser DOM is a browser is a browser object.
React also maintains an in-memory Document object model; it is light weight representation of the browser DOM. Another advantage advantage to using this that it is very fast and hence re-rendering occurs very fast[complete re-rendering does not take place and only the components that have changed their states only re-render].
It uses Diffing algorithm. Recall that we use 'key' while using multiple items : for example while using lists. This keeps track of only those items that have changed and re-renders only those that have changed. Additionally, there is a newer algorithm in React16 that is lot more faster than 'diffing' --> React Fiber.

Adding header and footer to our application
-------------------------------------------
install font-awesome
    yarn add font-awesome@4.x.xx
    yarn add bootstrap-social@x.y.z
React Fragments: 
    <>
    </> or </React.Fragment>
A react fragment enables to group together a bunch of html elements and bind it together. Adding <div> will add an "EXTRA" node in the react DOM.
Note: A Jumbotron allows to add some content.

React Router
--------------
Install react-router-dom
    yarn add react-router-domk
router component: <Browser Router>
<HashRouter> if you are using a static server

So recall that using <a> tag for creating link would require to reload the content of the page. Therefore react comes up with a clever way to overcome this time lag. Using <BrowserRouter> , <Route> and <Switch> we can first load all the pages at once but this will be accessed only when a particular "path" in the browser is found. 
What happens is all the components [ Menu, Footer, Header...] are stacked as they should be in the Main.js, but only some of these components are rendered when a particular path is met on the browser. This is achieved using "exact" within <Route> 
SPA[Single Page Application]
------------------------------
  - Loads only once
  - ofcourse the data will be fetched from the server as and when required
  - Search Engine Optimisation is difficult
  - But gives smooth user experience 
 However, this does not mean that MPC are always, as with everything the depends up on the situation we are in.
 
 So, do you realize how we brought everthing together? I could already see that we are trying to do something different here as, I have written in the section above. This means that I am understanding the subject matter. 
 Also note that SPAs have "VIEWs", and the beauty and its utility is that it a view can have some component and the other can completely ignore that.   

































How to pass parameters in the URL:
-----------------------------------
The route parameters spcefied in the path specificatino as a 'token'
  - e.g., path: 'menu/:id' where id is the token
  - <Link to{`/menu/${dish.id}`}>
  - Route passes three props to the component:
    - match
    - location 
    - history
match Object:
it provides info about how a <Route path> matched the URL
  - params: an object that contains key/value pair parsed from the URL corresponding to the dynamic segments of the path
  - if path is specified as /menu/:id, then a path like /menu/42 will result in match.params.id being equal to '42'

basically all this will enable us to pass data from one component to the other. 
Job: if we click at on any dish, the corresponding 'id' will be passed.

DishDetail.js : tells what to display using the props[a particular dish and the corresponding comments]. It basically makes a view that displays the selected dish along with its details. One at a time, dish will be selected from the view associated with the MenuComponent.js

MenuComponent.js: This component just lays out a view in which a menu of four dishes is presented on the page. This view is accessed when the "route" matches "/menu" exactly. Also, this component adds component to each of these dishes using <Link to={`/menu/${dish.id}}`}>. In this way each card gets "linked" to its corresponding view. 

MainComponent.js: It just basically lays out all the components. Which view will be shown when is managed here in this component by specifying appropriate route. <Route path="/menu/:dishId" component={DishWithId} />, ofcourse a functional component will be defined within the render() method of the Main component. This also passes props to the DishDetail.js as : dish and comments. This "dish" and "comments" will be received by the functional compoent-> DishWithId, using the "match" prop [ one of the three props that is always passed when component is associated with/created using <Route>]. 
    parseInt(match.params.dishId,10) will find the parameter passed with the URL and parse it into an Integer, which should be done if it is being compared for equality).
    crux: use match.params.dishId to get the parameter passed using URLs 
