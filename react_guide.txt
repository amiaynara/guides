This is a guide for REACT & REDUX
__________________________________

Why do we need a Library/Frameworks?
WE can build fairly complex websites using HTML, CSS, JS,bootstrap and jQuery. 
Complexity of managing DOM manipulation and data updates manually.
Well defined application architectures(these libraries and Frameworks have). 

A Library offers 
    - Collection of implementations of behaviour with a well defined interface to invoke it. 
    - Reuse of behaviour
    - Modularity (jquery)
Software Framework
    -Abstractionin which software provides generic functionality that can be selectively changed by additional 
     user-written code. 

 eg. Angular, Ember, Backbone....

What is React?
A JavaScript library for building user interfaces. It is Declarative and Component-based. Facebook developed in 2011. 
Speed. Simplicity. 

Vocabulary: One-way data flow, JSX, Components, State, Props, Virtual DOM, Element, Flux/Redux, Test.

-----------------
create-react-app
-----------------
We will be using yarn here. 
    sudo npm install --save-dev create-react-app
#install yarn exactly as given in the official documentation
    npx create-react-app <name_of_proj_directory> # after going into the intended directory
now install the lite-server(or any server)--> add that to the script of the package.json. 
    directory will be successfully created. And you will see the messages:
      yarn start
      yarn build
      yarn test
      yarn eject
    These options will be shown.
    You will also see 6 files(folders are file in disguise).
now
    yarn start #npm start ## depending on your choice
This will open your default browser and with that you will see the animation React(yes the famous one).

The next step is to get familiar with enviroment. Looking at src/App.js. 
We find some vague relationship with the html syntax but we have some distance to cover before we arrive at any conclusions. 

Configure React: Reactstrap
----------------------------
We will make use of Bootstrap4 classes that we learnt in the previous course. So to attain that goal we will install "Reactstrap" [Recall that bootstrap requires popper and jquery as well.]. 
        yarn add bootstrap@4.0.0
        yarn add reactstrap@5.0.0
        yarn add react-popper@0.9.2
Then import bootstrap to the 'index.js'
    import 'bootstrap/dist/css/bootstrap.min.css'
Also modify the 'App.js' in the src. This will be done to add our own component. And get it displayed on to the browser when the page is requested by the browser. 

Note:
    - We fill the page using Components, that are created in files like App.js or Tweet.js or page.js
    - The actual rendering is done by the 'index.js'
    - By defining components in JS(using React), we actually the export 'html' to the main page and also add the javaScript behaviour at the SAME Place. 

Getting hands dirty
-------------------
Adding our own components

    import React, { Component } from 'react';

    class Menu extends Component {
      
      // JSX here

      constructor(props){
        super(props);
      }
      render() {
        return (
        );
      }
    }


using un-named function to get things done when you have a paramter at hand. The .map function can be very powerful. 
const menu=this.state.map((dish){
  //use dish to construct the body of some object in the web-page. 
  //we use it when we see that we have to do some repetitive work
  //dish is an array
}
---------------------------------------------------------------------------------
Important note: All documents about using reactstrap is present on its github pagehttps://reactstrap.github.io/
---------------------------------------------------------------------------------
============
State
------------
Each component can store its own local information in its "state" 
  - these states are private and fully controlled by the component
  - can be passed as 'props' [short for properties] to children
  - only a component implemented as a Component can have a local state. 
[This means that we have react component that are not implemented as class]
  - the state information is usually declared in the constructor
  - to update the state of a 'component' -> [cannot be done by changing the property values]-----> can only be done through the setState() method. 

Never do the following:
    this.state.selectedDish=dish;

--------
props
--------
A parent component can be storing the state. this state can be passed to a child component using 'props' as a single object. 
    <Menu dishes={this.state.dishes}/>
Here the dishes are available as props within the Menu Component and can be accessed as 'this.props.dishes'
So this way data can be passed DOWN the heirarchy. 
But what to do when we need to passes the data up the heirarchy and cause the changes everywhere to take place. This is called 'Lifting State Up'.
-----------
Handling Arrays
-----------
const menu = this.props.dishes.map((dish)=>{
  return (
    <div key={dish.id}>
      <h1>{dish.name}</h1>
      <p>{dish.description}</p>
    </div>
  );
}

Note the use of 'key'. This is used so that when there are changes to the list, then it helps in re-rendering of the page. React modifies only those parts of DOM that 'Need' to be modified.  

React Component Lifecycle
-------------------------
First it does not exist, then it gets created; it changes if necessary and finally gets removed/unmounted. During each phase of its life cycle there are certain methods that are/can be invoked. 
1. Mounting: 
    - constructor()
    - getDerivedStateFromProps()
    - render()
    - componentDidMount()
Tip: A good web-developer tool is React-dev-tool (extension available for all chrome and firefox).    

Informal classification of components
--------------------------------------
- Presentational(like 'DishDetail') vs Container 
- Skinny vs Fat [you can see why they are informal]

2. Updating
  In the project at hand our 'DishDetail' has this stage of the life Cycle. AS a different dish is selected the view is changed(partially).
At this stage we again have certain hooks/methods that are called:
  - getDerivedStateFromProps()
  - shouldComponentUpdate()
  - render()
  - getSnapshotBeforeUpdate()
  - componentDidUpdate()


These can be shown to be invoked by putting them in the code at appropriate places and then do console.log()

Functional Components
------------------------
We have been creating components using the classes; there is simpler method.
We have been "extending" React.Component class to get class components. And here we are required to include 'render()' method.
JavaScript function that returns a React element or a collection of React elements that define the view 
Note: this receives props as parameter. 
      CANNOT have a local state. 

When to use functinal components?
When you have components that PURELY use the 'props' as passed from the parents. They don't have(or don't need to have any local state) then we can/shold use functions to implement such components. 
Another hint is given by 'yarn start' : "Line 6: Useless constructor' ;)
Enough of talking... how do I do it?
    function RenderMenuItem({dish,onClick}) {
      return (
        <!-- some HTML code -->
        <-- which can also have {dish.image} included javascript -->
      );
    }

Another WAY:
    
    const Menu = (props) => {
      const menu = props.dishes.map((dish)=>{
        return (
          <div>HI I am a new component!</div>
          );
        });
      }
Virtual DOM
------------
Browser DOM is a browser is a browser object.
React also maintains an in-memory Document object model; it is light weight representation of the browser DOM. Another advantage advantage to using this that it is very fast and hence re-rendering occurs very fast[complete re-rendering does not take place and only the components that have changed their states only re-render].
It uses Diffing algorithm. Recall that we use 'key' while using multiple items : for example while using lists. This keeps track of only those items that have changed and re-renders only those that have changed. Additionally, there is a newer algorithm in React16 that is lot more faster than 'diffing' --> React Fiber.

Adding header and footer to our application
-------------------------------------------
install font-awesome
    yarn add font-awesome@4.x.xx
    yarn add bootstrap-social@x.y.z
React Fragments: 
    <>
    </> or </React.Fragment>
A react fragment enables to group together a bunch of html elements and bind it together. Adding <div> will add an "EXTRA" node in the react DOM.
Note: A Jumbotron allows to add some content.

React Router
--------------
Install react-router-dom
    yarn add react-router-domk
router component: <Browser Router>
<HashRouter> if you are using a static server

So recall that using <a> tag for creating link would require to reload the content of the page. Therefore react comes up with a clever way to overcome this time lag. Using <BrowserRouter> , <Route> and <Switch> we can first load all the pages at once but this will be accessed only when a particular "path" in the browser is found. 
What happens is all the components [ Menu, Footer, Header...] are stacked as they should be in the Main.js, but only some of these components are rendered when a particular path is met on the browser. This is achieved using "exact" within <Route> 
SPA[Single Page Application]
------------------------------
  - Loads only once
  - ofcourse the data will be fetched from the server as and when required
  - Search Engine Optimisation is difficult
  - But gives smooth user experience 
 However, this does not mean that MPC are always, as with everything the depends up on the situation we are in.
 
 So, do you realize how we brought everthing together? I could already see that we are trying to do something different here as, I have written in the section above. This means that I am understanding the subject matter. 
 Also note that SPAs have "VIEWs", and the beauty and its utility is that it a view can have some component and the other can completely ignore that.   

































How to pass parameters in the URL:
-----------------------------------
The route parameters spcefied in the path specificatino as a 'token'
  - e.g., path: 'menu/:id' where id is the token
  - <Link to{`/menu/${dish.id}`}>
  - Route passes three props to the component:
    - match
    - location 
    - history
match Object:
it provides info about how a <Route path> matched the URL
  - params: an object that contains key/value pair parsed from the URL corresponding to the dynamic segments of the path
  - if path is specified as /menu/:id, then a path like /menu/42 will result in match.params.id being equal to '42'

basically all this will enable us to pass data from one component to the other. 
Job: if we click at on any dish, the corresponding 'id' will be passed.

DishDetail.js : tells what to display using the props[a particular dish and the corresponding comments]. It basically makes a view that displays the selected dish along with its details. One at a time, dish will be selected from the view associated with the MenuComponent.js

MenuComponent.js: This component just lays out a view in which a menu of four dishes is presented on the page. This view is accessed when the "route" matches "/menu" exactly. Also, this component adds component to each of these dishes using <Link to={`/menu/${dish.id}}`}>. In this way each card gets "linked" to its corresponding view. 

MainComponent.js: It just basically lays out all the components. Which view will be shown when is managed here in this component by specifying appropriate route. <Route path="/menu/:dishId" component={DishWithId} />, ofcourse a functional component will be defined within the render() method of the Main component. This also passes props to the DishDetail.js as : dish and comments. This "dish" and "comments" will be received by the functional compoent-> DishWithId, using the "match" prop [ one of the three props that is always passed when component is associated with/created using <Route>]. 
    parseInt(match.params.dishId,10) will find the parameter passed with the URL and parse it into an Integer, which should be done if it is being compared for equality).
    crux: use match.params.dishId to get the parameter passed using URLs 


  Assignment-II
  --------------
  Creating AboutComponent.js and integrating. 
      - using <Media>, note: omit data in data-src while using image. 
      - Both fnal and class component can be passed within the component={}
      - <Route exact path="/about" component={about_fc} /> will require a component 'about_fc'
      - const about_fc=()=> {return(<About leaders={this.state.leaders} />
      - About receives the whole of leaders data
      - IN AboutComponent.js- 
        - const leaders=props.leaders.map((leader)=> { return(<RenderLeader leader={leader} /> )});
        
        - const RenderLeader({leader}){return(<Media> put the media JARGON here </Media> )} 
        - Map here will have done the magic and there you go you are done. 


  Controlled Components:
  ----------------------
Controlled forms: [recall control-form class from the Bootstrap course]
Forms are convenient and compelling way of getting informations from the user. Here we are going to validate or add constraints to the data that is being entered in to the form. 
Recall-
  <form>
    <input> type: text, password, submit radio, checkbox, ...
    <textarea>
    <button>
    <select>
  </form>

Note: Every element of a form maintains its own state. We will try to use this proproperty. 

Now, Form being fully interactive component will change states, these states will be 'related' to the react components' state, and will be maintained as 'Single source of truth'. tying the form state to component state results in Controlled Component. We use various functions to maintaing this 'tie-up'. 

- Every state mutation will have an associated handler function

    <Form onSubmit={this.handleSubmit}>
      <FormGroup row>
        <Label htmlFor="lastname" md={2}>Last Name</Label>
        <Col md={10}>
          <Input type="text" id="lastname" name="lastname" placeholder="Last Name" value={this.state.lastname} onChange={this.handleInputChange} />
        </Col>
      </FormGroup>
      </FormGroup row>
      <Col md={{size:10, offset:2}}>
        <Button type="submit" >Send feedback</Button>
        </Col>
      </FormGroup>
    </Form>

Two functions must be created to handle the event [onChange and onSubmit] 
    handleInputChange(event){
      const target=event.target;
      const value= target.value? target.checked:target.value;
      const name=target.name;

      this.setState({
          [name]:value
      });
    }
Similarly, we have a function to handle the submit action.
    handleSubmit(event){
      console.log('current state is " + JSON.stringify(this.state));
      event.preventDefault;
    }

  Also note that it requires 'binding in the constructor to get the function to work. 

  Validation can also be done.
  How please refer to the confusion/src/components/ContactComponent.js in react folder for detailed syntax.


Uncontrolled components
------------------------
We might not always need all the intrecacies of the 'controlled forms', instead we might want to keep it light. So we can use ref provided with uncontrolled components.
Side Note: HeaderComponent.js demonstrates toggling.  

Positioning in the nav bar:
  1                 <Navbar dark expand="md">
  2                     <div className="container">
  3                         <NavbarToggler onClick={this.toggleNav} />
  4                         <NavbarBrand className="mr-auto" href="/"><img src='asset    s/images/logo.png' height="30" width="41" alt='Ristorante Con Fusion' /></NavbarB    rand>
  5                         <Collapse isOpen={this.state.isNavOpen} navbar>
  6                             <Nav navbar>
  7                             <NavItem>
  8                                 <NavLink className="nav-link"  to='/home'><span c    lassName="fa fa-home fa-lg"></span> Home</NavLink>
  9                             </NavItem>
 10                             <NavItem>
 11                                 <NavLink className="nav-link" to='/about'><span c    lassName="fa fa-info fa-lg"></span> About Us</NavLink>
 12                             </NavItem>
 13                             <NavItem>
 14                                 <NavLink className="nav-link"  to='/menu'><span c    lassName="fa fa-list fa-lg"></span> Menu</NavLink>
 15                             </NavItem>
 16                             <NavItem>
 17                                 <NavLink className="nav-link" to='/contact'><span     className="fa fa-address-card fa-lg"></span> Contact Us</NavLink>
 18                             </NavItem>
 19                             </Nav>
 20                         </Collapse>
 21                                                     <Nav className="ml-auto" navb    ar>
 22                                 <NavItem>
 23                                     <Button outline onClick={this.toggleModal}><s    pan className="fa fa-sign-in fa-lg"></span> Login</Button>
 24                                 </NavItem>
 25                             </Nav>
 26                     </div>
 27                 </Navbar>
 28                 <Jumbotron>
 29                     <div className="container">
 30                         <div className="row row-header">
 31                             <div className="col-12 col-sm-6">
 32                                 <h1>Ristorante con Fusion</h1>
 33                                 <p>We take inspiration from the World's best cuis    ines, and create a unique fusion experience. Our lipsmacking creations will tickl    e your culinary senses!</p>
 34                             </div>
 35                         </div>
 36                     </div>
                                                                   33,17         7

                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>
                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>
                    <ModalBody>
                    
                    </ModalBody>
                </Modal>

    isModalOpen is stated that is initialised to 'false'
From internet------------->
  MVC Architecture
MVC is well-known for its three-layer development architecture and it divides applications into three components:

Model: Maintains the data and behavior of an application
View: Displays the model in the UI
Controller: Serves as an interface between view & model components

Whenever the controller receives the request from the user, it uses the appropriate Model & View and generates the response sending it back to the user.

Flux Architecture
After learning a few highlights regarding the instability and complexity of the MVC architecture, the Facebook development team made some important changes in the system and released Flux as an alternative to MVC architecture. The Flux architecture is based on the following components:

Store/ Stores: Serves as a container for the app state & logic
Action: Enables data passing to the dispatcher
View: Same as the view in MVC architecture, but in the context of React components
Dispatcher – Coordinates actions & updates to stores

Redux
-------
Redux is a library, which implements the idea of Flux but in quite a different way. Redux architecture introduces new components like:

Reducer: Logic that decides how your data changes exist in pure functions
Centralized store: Holds a state object that denotes the state of the entire appRedux Architecture
----------------------------------------------------000000----------------------------

What are design patterns?
When we work on certain area, we often encounter repetitive tasks. For the first time we 'invent' a solution. But we don't want to keep reinventing the solutions again and again. Here, comes the importance of 'design patterns'. These are nothing but a well documented solution to a recurrin propblem. Also called design architectures.
All of this may/should look abstract to you at this point, because they are in fact Abstractions. This should become clear as you go on.[Flux is an architecture and supposed to be Abstration!]

One implementation of flux is - Redux: where you take away state from the components and place them in 'store' 

Redux
--------
First things first, React has nothing to do with Redux; it just that Redux has been widely leveraged by the React Community, hence they are always talked about hand-in-hand. 
It supports single source of truth.
Why Redux?
  - Logging: Here always New States are created, older remain 'immutable'.
  - API handling
  - Undo/Redo
  - State Persistance
  - "time-travel-debugging"
Some people tend to see Redux as an implementatin of flux, but the Russian Engineer is here to disagree,at least partially.
Terms:
  - State: stored in plain JS object
  - Action: plain object with a type field that specifies how to change something in the state
  - Reducer: pure function that take the current state and action and return a new state. 

On hand session
----------------
    yarn add redux
    yarn add react-redux
then
    mkdir confusion/src/redux
    cd src/redux
    vim reducer.js
this will import the data dishes, comments and so on. As it should, for the reducer function is pure and works with state although it cannot change the state. untionb

React-Redux forms
-------------------
A versatile, fast and intuitive library for creating complex and perfomant form in React and Redux.
Imagiine a situation where you fill a form and by mistake you go to some other page. When you come back you find that the data that was filled has been gone by now. But this can be avoided by using the Redux and its concept of stores.
So, we see it is needed when we need PERSISTENCE. If we are in a situation where we don't need Persistence then we can go with LocalForm[storing the state locally].    
    yarn add react-redux-form

In ContactComponent.js
    import { LocalForm, Control, Errors } from 'react-redux-form';

And we remove various other classes : Form, Input and so on. 

Here, we will make changes in the 'ContactComponent.js'
Note that previously we had to take care of the current state of the component using various state defined in the constructor as properties of and object. Now we get rid of all those. We also get rid of the functions that 'handledInput and Blur'. All these will be taken care by the classes provided by the 'react-redux-form'. 
We can already realise that our job has been shortened already a lot. It looks simpler[ however we have got rid of the validation part].
Here the 'react-redux-form' also provides us with the ability to carry out validation as well. 

Important Link to create an alternate form:
---------------------------------------------
https://medium.com/@steida/react-form-validation-without-abstraction-41264608473c

Assignment III
---------------
Task I : Add a button to bottom of the comments section of a dish, where details are shown. 
This can be easily achieved by creating a new file in the components folder = CommentSubmitComment.js. This will have 'CommentSubmit'  and export it. Use reactraps' Button to create button [just have a look at the documentation]. Then use the Bootstrap's 'fa fa-pencil' to add the finishing touch. And then add the class to the DishDetailComponent.js to render it, ofcourse after importing it. 

Task-II
This is easy as well. But I wasted my time because of the importing 'Label', 'Row' and 'Col' in 'react-redux-form' instead of the importing them in 'reactstrap'=> A blunder = A rookie mistake.  It is alright, I learnt be it the hard way as always. 
previously we     had to update the states as soon as it was filled by the user[these states were d    efined in the constructor of the component]. this was then later used to 1. VALID    ATE 2. SHOW in the form of alert. 

Task-III 
Validation : refer to ContactComponent.js: Nothing new here

button created in TaskI will be used to toggle a Modal. For that we have to create a modal[ can be looked up]. But more importantly notice the use of toggle() method. This uses the current state [show] to show or hide the modal. Also, the toggle is applied to isOpen={this.toggle.show} and to the ModalHeader as well toggle={this.toggle}

Redux Actions:
--------------
They are simply Payloads of information that send data from your application to the store. 
- Done with the help of store.dispatch()
Action is a plain javaScript object. This JS ojbect essentially must have a 'type' property, this will tell the reducer function, what type of action is 
to be performed. define action types as String constants. Rest of the oject is the data or the payload. 
Action Creators : The functions that are responsible for creating action objects. 
Reducer functions, as already discussed, are functions that take the previous state as i/p and return the new state, WITHOUT changing the previous state. 
Reducer will take this action and depending upon the action type, it will generate the new state, if necessary. Note: if our state consists of independent
properties, dishes, comments, chefs..., they are independent, so these can be handled by different reducer functions. Then finally combine them to generate
the overall state. 
To achieve the spitting of the reducers, we go to the 'redux' directory and then move the states (dishes, comments, promotions, leaders) to its individual 
reducers functions, and then finally combine them in the configureStore.js use 'combineReducers'. [ note that dishes , promotions are data present in the 
shared folder]. 
